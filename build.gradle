import groovy.sql.Sql

/**
 * Copyright 2011 David Millett
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 *  limitations under the License.
 */
plugins {
  id "com.github.ben-manes.versions" version "0.28.0"
  //id 'com.github.spotbugs' version '1.6.8'
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: "com.github.ben-manes.versions"
//apply plugin: 'com.github.spotbugs'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.github.dmillett'
archivesBaseName = 'jig'
version = '1.0.0-A1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  jcenter()
}

wrapper {
  gradleVersion = '6.4'
}

build.dependsOn check

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.3'
  compile group: 'org.jyaml', name: 'jyaml', version: '1.3'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
  compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.2'

  testCompile group: 'junit', name: 'junit', version: '4.13'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
  testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
}

test  {
  //test.testLogging.showStandardStreams = true
  def testConfigPath = "$buildDir/resources/test/config"
  project.logger.info "Setting Test Config Path To: ${testConfigPath}"
  systemProperties ['jig.location'] = "$testConfigPath"
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

//// Required due to Gradle issue with SpotBugs
//ext {
//  SpotBugsTask = com.github.spotbugs.SpotBugsTask
//}

//spotbugs {
//  toolVersion = '3.1.9'
//}

//spotbugsTest.enabled = false
//
//tasks.withType(SpotBugsTask) {
//  reports {
//    xml.enabled = false
//    html.enabled = true
//  }
//}
jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
  }
}

task jigJar(type: Jar)

task jigSourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

//artifacts {
//  archives jigJar
//  archives jigSourcesJar
//}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

//task h2_databaseSetup {
//
//    def sql2 = Sql.newInstance("jdbc:h2:mem:", "test", "", "org.h2.Driver")
//    sql2.execute("create table CONFIG (id int primary key, key varchar(50), value varchar(50))")
//    sql2.execute("insert into CONFIG values (1, 'db.one', '1'), (2, 'db.two', 'two'), (3, 'db.three', 'false')")
//
//    def insertedRows = sql2.rows("SELECT * FROM CONFIG")
//    assertEquals(3, insertedRows.size())
//}

//signing {
//  sign configurations.archives
//}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

//      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//        authentication(userName: ossrhUsername, password: ossrhPassword)
//      }
//
//      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//        authentication(userName: ossrhUsername, password: ossrhPassword)
//      }

      pom.project {
        name 'jig'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'A Java and Groovy configuration library.'
        url 'https://github.com/dmillett/jig'

        scm {
          connection 'https://github.com/dmillett/prank.git'
          developerConnection 'https://github.com/dmillett/jig.git'
          url 'https://github.com/dmillett/jig'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'dmillett'
            name 'dmillett'
            email 'd_millett@hotmail.com'
          }
        }
      }
    }
  }
}
